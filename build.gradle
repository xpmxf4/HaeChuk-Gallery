buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.15'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    // querydsl 추가
    id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10'
    id 'jacoco'
}

bootJar {
    archiveFileName = 'HaeChukGael.jar'
}

group = 'HailYoungHan'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '11'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    ///map struct
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    implementation 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    // Querydsl
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}"

    // Lombok
    annotationProcessor 'org.projectlombok:lombok'
    compileOnly 'org.projectlombok:lombok'

    // Database
    runtimeOnly 'com.mysql:mysql-connector-j'
    testImplementation 'com.h2database:h2'
}

tasks.named('test') {
    useJUnitPlatform()
}

// querydsl 옵션
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}

sourceSets {
    main.java.srcDir querydslDir
}

configurations {
    querydsl.extendsFrom compileClasspath
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

// jacoco 옵션
jacoco {
    toolVersion = "0.8.11"
}

task testCoverage(type: Test) {
    group 'verification'
    description 'Runs the unit tests with coverage'

    dependsOn(':test',
            ':jacocoTestReport',
            ':jacocoTestCoverageVerification')

    tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
    tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}

test {
    useJUnitPlatform()

    // 'generateJacocoReport' 속성이 'true'인 경우에만 Jacoco 보고서 생성 태스크를 활성화합니다.
    if (project.hasProperty('generateJacocoReport') && project.property('generateJacocoReport') == 'true') {
        finalizedBy 'jacocoTestReport'
    }
}

jacocoTestReport {
    doFirst {
        println 'Starting Jacoco Report Generation...'
    }

    reports {
        // 원하는 리포트를 켜고 끌 수 있습니다.
        html.required = true
        xml.required = false
        csv.required = false
    }

    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    doFirst {
        println 'Starting Jacoco Jacoco Test Coverage Verification...'
    }

    violationRules {
        rule {
            enabled = true
            element = 'CLASS'

            // 브랜치 커버리지를 최소한 75% 만족시켜야 합니다.
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.75
            }

            // 라인 커버리지를 최소한 75% 만족시켜야 합니다.
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.75
            }

            // 빈 줄을 제외한 코드의 라인수를 최대 200라인으로 제한합니다.
            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 200
            }

            // 제외할 파일 패턴
            excludes = [
                    // 엔티티 패키지에 있는 모든 클래스를 제외합니다.
                    'hailyounghan.board.entity.*',
                    // 모든 Q 클래스를 제외합니다 (Q<EntityName>과 같은 명명 규칙을 따르는 것으로 가정).
                    '*Q*',
                    // 모든 설정(config) 클래스를 제외합니다.
                    'hailyounghan.board.config.*',
                    // 모든 DTO 클래스를 제외합니다.
                    'hailyounghan.board.dto.*',
                    'hailyounghan.board.BoardApplication',
            ]
        }
    }
}